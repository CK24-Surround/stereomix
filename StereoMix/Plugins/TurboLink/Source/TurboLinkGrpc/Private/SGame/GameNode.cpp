//Generated by TurboLink CodeGenerator, do not edit!
#include "SGame/GameNode.h"
#include "SGame/GameService.h"
#include "TurboLinkGrpcManager.h"
#include "TurboLinkGrpcUtilities.h"
#include "Engine/World.h"
#include "TimerManager.h"
#include "Runtime/Launch/Resources/Version.h"

UCallGameServiceGetServiceVersion* UCallGameServiceGetServiceVersion::GetServiceVersion(UObject* WorldContextObject, const FGrpcGameGetServiceVersionRequest& request, FGrpcMetaData metaData, float deadLineSeconds)
{
	UCallGameServiceGetServiceVersion* node = NewObject<UCallGameServiceGetServiceVersion>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->GameService = Cast<UGameService>(turboLinkManager->MakeService("GameService"));
	if (node->GameService == nullptr)
	{
		return nullptr;
	}
	node->ServiceState = EGrpcServiceState::Idle;
	node->Request = request;
	node->MetaData = metaData;
	node->DeadLineSeconds = deadLineSeconds;

	node->GameService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallGameServiceGetServiceVersion::OnServiceStateChanged);
	return node;
}

void UCallGameServiceGetServiceVersion::Activate()
{
	GameService->Connect();
}

void UCallGameServiceGetServiceVersion::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcGameGetServiceVersionResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		GameServiceClient = GameService->MakeClient();
		GameServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallGameServiceGetServiceVersion::OnContextStateChange);
		GameServiceClient->OnGetServiceVersionResponse.AddUniqueDynamic(this, &UCallGameServiceGetServiceVersion::OnResponse);

		Context = GameServiceClient->InitGetServiceVersion();
		GameServiceClient->GetServiceVersion(Context, Request, MetaData, DeadLineSeconds);
	}
}

void UCallGameServiceGetServiceVersion::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallGameServiceGetServiceVersion::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcGameGetServiceVersionResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnGetServiceVersionResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallGameServiceGetServiceVersion::Shutdown()
{
	GameService->OnServiceStateChanged.RemoveDynamic(this, &UCallGameServiceGetServiceVersion::OnServiceStateChanged);
	if (GameServiceClient != nullptr)
	{
		GameService->RemoveClient(GameServiceClient);
		GameServiceClient->Shutdown();
		GameServiceClient = nullptr;
	}

	if (GameService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(GameService);
		GameService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}
