//Generated by TurboLink CodeGenerator, do not edit!
#include "GameContext.h"
#include "SGame/GameClient.h"
#include "GameService_Private.h"
#include "GameMarshaling.h"
#include "TurboLinkGrpcManager.h"

GrpcContext_GameService_GetServiceVersion::GrpcContext_GameService_GetServiceVersion(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_GameService_GetServiceVersion::Call(const FGrpcGameGetServiceVersionRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::game::GetServiceVersionRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UGameService* service = (UGameService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncGetServiceVersion(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_GameService_GetServiceVersion::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::game::GetServiceVersionResponse* _RpcResponse) 
		{
			UGameServiceClient* client = (UGameServiceClient*)(this->Client);
			if (!(client->OnGetServiceVersionResponse.IsBound())) return;

			FGrpcGameGetServiceVersionResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnGetServiceVersionResponse.Broadcast(Handle, _Result, response);
		}
	);
}
