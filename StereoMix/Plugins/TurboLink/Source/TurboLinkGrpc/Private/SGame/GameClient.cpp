//Generated by TurboLink CodeGenerator, do not edit!
#include "SGame/GameClient.h"
#include "SGame/GameService.h"
#include "GameContext.h"
#include "TurboLinkGrpcManager_Private.h"
#include "Templates/SharedPointer.h"

FGrpcContextHandle UGameServiceClient::InitGetServiceVersion()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_GameService_GetServiceVersion>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UGameServiceClient::GetServiceVersion(FGrpcContextHandle Handle, const FGrpcGameGetServiceVersionRequest& Request, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextGetServiceVersion = StaticCastSharedPtr<GrpcContext_GameService_GetServiceVersion>(*context);
		for (const auto& metaDataPair : MetaData.MetaData)
		{
			contextGetServiceVersion->RpcContext->AddMetadata(
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Key)).Get(),
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Value)).Get()
			);
		}

		if (DeadLineSeconds > 0.f)
		{
			std::chrono::time_point deadLine = std::chrono::system_clock::now() + 
				std::chrono::milliseconds((int32)(1000.f * DeadLineSeconds));
			contextGetServiceVersion->RpcContext->set_deadline(deadLine);
		}
		contextGetServiceVersion->Call(Request);
	}
}

void UGameServiceClient::TryCancel(FGrpcContextHandle Handle)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		(*context)->TryCancel();
	}
}

void UGameServiceClient::Shutdown()
{
	OnGetServiceVersionResponse.Clear();
	Super::Shutdown();
}

